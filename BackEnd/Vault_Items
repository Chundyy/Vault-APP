import mysql.connector
from argon2 import PasswordHasher
from cryptography.hazmat.primitives.ciphers.aead import AESGCM
import os
import base64

# Inicializa o Argon2id
ph = PasswordHasher()

# === CHAVE AES (de 32 bytes = 256 bits) ===
# Em produ√ß√£o, guarda isto num cofre seguro!
CHAVE_AES = AESGCM.generate_key(bit_length=256)

# === Fun√ß√µes de encripta√ß√£o ===

def encriptar_documento(chave, dados):
    aesgcm = AESGCM(chave)
    nonce = os.urandom(12)  # GCM recomenda 12 bytes
    dados_bytes = dados.encode()
    ciphertext = aesgcm.encrypt(nonce, dados_bytes, None)
    return base64.b64encode(nonce + ciphertext).decode()

def desencriptar_documento(chave, dados_encriptados):
    aesgcm = AESGCM(chave)
    dados = base64.b64decode(dados_encriptados)
    nonce = dados[:12]
    ciphertext = dados[12:]
    plaintext = aesgcm.decrypt(nonce, ciphertext, None)
    return plaintext.decode()

# === Conectar √† base de dados ===
def conectar_bd():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="123",
        database="vault_app"
    )

# === Adicionar item ao Vault com encripta√ß√£o ===
def adicionar_item_vault():
    username = input("Nome do utilizador: ")
    tipo = input("Tipo (palavra-passe/documento/foto): ")
    dado = input("Conte√∫do a guardar: ")

    # Encriptar o dado
    dado_encriptado = encriptar_documento(CHAVE_AES, dado)

    conn = conectar_bd()
    cursor = conn.cursor()

    # Obter user_id
    cursor.execute("SELECT id FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()

    if user:
        try:
            cursor.execute("""
                INSERT INTO vault_items (user_id, type, data_encrypted) 
                VALUES (%s, %s, %s)
            """, (user[0], tipo, dado_encriptado))
            conn.commit()
            print(f"Item '{tipo}' adicionado com sucesso ao Vault!")
        except mysql.connector.Error as err:
            print(f"Erro ao adicionar item: {err}")
    else:
        print("Utilizador n√£o encontrado!")

    cursor.close()
    conn.close()

# === Remover um item do Vault ===
def remover_item_vault():
    username = input("Nome do utilizador: ")

    conn = conectar_bd()
    cursor = conn.cursor()

    # Obter user_id
    cursor.execute("SELECT id FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()

    if not user:
        print("Utilizador n√£o encontrado!")
        cursor.close()
        conn.close()
        return

    user_id = user[0]

    # Mostrar os itens do utilizador
    cursor.execute("SELECT id, type, data_encrypted FROM vault_items WHERE user_id = %s", (user_id,))
    itens = cursor.fetchall()

    if not itens:
        print("Nenhum item encontrado para este utilizador!")
        cursor.close()
        conn.close()
        return

    print("\nItens dispon√≠veis para remo√ß√£o:")
    for item in itens:
        print(f"üîπ ID: {item[0]} | Tipo: {item[1]} | Conte√∫do (encriptado): {item[2][:30]}...")

    item_id = input("Digite o ID do item que deseja remover: ")

    try:
        cursor.execute("DELETE FROM vault_items WHERE id = %s AND user_id = %s", (item_id, user_id))
        conn.commit()

        if cursor.rowcount > 0:
            print(f"Item com ID {item_id} removido com sucesso!")
        else:
            print("Erro: Item n√£o encontrado ou pertence a outro utilizador.")

    except mysql.connector.Error as err:
        print(f"Erro ao remover item: {err}")

    cursor.close()
    conn.close()

# === Menu ===
def menu():
    while True:
        print("\nüîπ MENU üîπ")
        print("Criar utilizador")
        print("Criar grupo")
        print("Adicionar utilizador a um grupo")
        print("Adicionar item ao Vault")
        print("Autenticar utilizador")
        print("Remover item do Vault")
        print("Sair")

        escolha = input("Escolha uma op√ß√£o: ")

        if escolha == "4":
            adicionar_item_vault()

        elif escolha == "5":
            remover_item_vault()

        elif escolha == "0":
            print("A sair... At√© breve!")
            break
        else:
            print("Op√ß√£o inv√°lida! Escolha um n√∫mero entre 0 e 6.")

# === Iniciar o menu ===
menu()
